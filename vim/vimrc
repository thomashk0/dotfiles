" vim: set ft=vim sw=4 ts=4 sts=4 tw=80 foldmarker={,} foldlevel=0 foldmethod=marker:
" ============================================================================ "
" A minimal Vim configuration
"
" Author: Thomas Hiscock <thomashk000@gmail.com>
" ============================================================================ "

" Configuration variables {

" Force this option to 0 to disable bepo keyboard bindings
let g:use_bepo_keyboard = 1


" Enable some mandatory plugins
let g:use_plugins = 1

" Enable nicer colorschemes (requires g:use_plugins = 1)
let g:use_extra_colorschemes = 0

" Enable some extra (non-essential) plugins
let g:use_plugins_extra = 0

" }
" General options (Plugins, UI, etc.) {

set nocp
if (g:use_plugins == 1)
    call plug#begin('~/.vim/plugged')
        " Tab switching in Tmux using the same keybindings as in vim
        Plug 'christoomey/vim-tmux-navigator'

        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-commentary'
        Plug 'godlygeek/tabular'
        Plug 'sheerun/vim-polyglot'

        if (g:use_plugins_extra)
            Plug 'rhysd/vim-clang-format', { 'for' : ['c', 'cpp'] }
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
            Plug 'junegunn/fzf.vim'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
        endif

        if (g:use_extra_colorschemes == 1)
            Plug 'rafi/awesome-vim-colorschemes'
        endif
    call plug#end()
endif

filetype on
filetype indent on
filetype plugin on

" No backup and swap files
set nobackup nowb noswapfile

" Styling
set nospell

set t_Co=256
set background=dark
if (g:use_extra_colorschemes == 1)
    colorscheme apprentice
else
    colorscheme desert
endif

syntax enable
set number
set relativenumber
set list
set listchars=tab:›-,trail:.,extends:#,nbsp:.
set cc=80

" Status bar
set showcmd ruler laststatus=2
set statusline=%!MyStatusLine()

" Tab, whitespaces, indent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set smartindent
set nowrap

set ignorecase
set hlsearch            " Highlight search results
set incsearch           " Search while typing the search string
" by default, make vim only complete in current directory
set path=.
" To support glob-like search use:
" set path+=**
set wildmenu

" }
" Keybindings {

" Leader is set as space
let mapleader = " "
let maplocalleader = ","

set backspace=indent,eol,start
set whichwrap+=<,>,h,l

if (g:use_bepo_keyboard == 1)
    " Remap basic movements
    noremap n l
    noremap r k
    noremap s j
    noremap t h

    noremap h t
    noremap j s
    noremap l n
    noremap k r

    noremap è ^
    noremap È 0

    " Fast moves between windows
    nnoremap <C-r> <C-W>k
    nnoremap <C-s> <C-W>j
    nnoremap <C-t> <C-W>h
    nnoremap <C-n> <C-W>l

    highlight NbSp ctermbg=lightgray guibg=lightred
    match NbSp /\%xa0/

    " Completion bindings
    " See :help inc-completion
    imap ,o <C-X><C-O>
    imap ,l <C-X><C-L>
    imap ,t <C-X><C-]>
    imap ,p <C-X><C-P>
    imap ,f <C-X><C-F>
    imap ,n <C-N>
    imap ,a <C-P>
    vmap ,f :ClangFormat<CR>

    " C-_ maps to C-/ in reality…
    " In normal mode, also move down ;)
    nmap <C-_> gccs
    vmap <C-_> gc

    " File modification
    nmap <leader>s :w<CR>
    nmap <leader>q :q!<CR>

    let g:UltiSnipsExpandTrigger="<C-a>"
    let g:UltiSnipsJumpForwardTrigger="<C-b>"
    let g:UltiSnipsJumpBackwardTrigger="<C-z>"
    let g:UltiSnipsEditSplit="vertical"

    nmap <leader><leader> :blast<CR>
    nmap <leader>b :Buffers<CR>
    nmap <leader>f :Files<CR>
    if has('nvim')
        " temporary fix, the :GFiles commands fail with neovim :(
        nmap <leader>gf :call fzf#run({'source': 'git ls-files', 'sink': 'e'})<CR>
    else
        nmap <leader>gf :GFiles<CR>
    endif
endif

nmap <F2> :call ToggleSpell()<CR>
nmap <F3> :call DeleteTrailingWS()<CR>
nmap <F4> :ClangFormat<CR>
imap <F5> FIXME(ThomasH, <C-R>=strftime("%d %b %Y")<CR>):

"}
" Utility functions {

func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc

" Spell Check
let b:myLang = 0
let g:myLangList=["nospell","fr","en_gb"]
function! ToggleSpell()
  let b:myLang = b:myLang + 1
  if b:myLang >= len(g:myLangList)
      let b:myLang=0
  endif
  if b:myLang==0
    setlocal nospell
  else
    exe "setlocal spell spelllang=".get(g:myLangList, b:myLang)
  endif
  echo "spell checking language:" g:myLangList[b:myLang]
endfunction

function! MyStatusLine()
    let statusline = ""
    " Filename (F -> full, f -> relative)
    let statusline .= "%f"
    " Buffer flags
    let statusline .= "%(%h%1*%m%*%r%w%) "
    " File format and type
    let statusline .= "(%{&ff}%(\/%Y%))"
    " Left/right separator
    let statusline .= "%="
    " Line & column
    let statusline .= "(%l,%c%V) "
    " Character under cursor (decimal)
    let statusline .= "%03.3b "
    " Character under cursor (hexadecimal)
    let statusline .= "0x%02.2B "
    " File progress
    let statusline .= "| %P/%L"
    return statusline
endfunction

" }
" Per language tweaks {
function! SetupVHDLConfig()
    setlocal comments^=:--!
    setlocal comments^=:--
    setlocal foldmethod=marker
    " Fold Doxygen groups
    setlocal foldmarker=@{,@}
endfunction
autocmd FileType vhdl call SetupVHDLConfig()

autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType conf setlocal ts=8 sts=8 sw=8 noexpandtab

" Orgmode
" }
